# import datetime
from datetime import datetime
import re
import json
import os
import subprocess
from dotenv import load_dotenv

dotenv_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), ".env")

# Load the .env file
load_dotenv(dotenv_path)

# WHAT_TOKEN = os.getenv("ACCESS_TOKEN")   
# VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
# PHONE_NUMBER = os.getenv("RECIPIENT_WAID") # my number
VERSION = os.getenv("VERSION")
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID") # test number

# this function checks the webhook request is about and user reply from wahasapp application or a notification from API
def check_notification(data):
    if not data.get('entry'):
        raise ValueError("Invalid JSON: 'entry' key not found")
    
    for entry in data['entry']:
        changes = entry.get('changes', [])
        for change in changes:
            value = change.get('value', {})
            if 'messages' in value.keys():
                return 1
            elif 'statuses' in value.keys():
                statuses = value.get('statuses', [])  
            
                for status in statuses:  
                    if status['status'] == 'sent':
                        return 0
                    elif status['status'] == 'read':
                        return -1
                    elif status['status'] == 'delivered':
                        return -1

def parse_notification_message(data):   
    if not data.get('entry'):
        raise ValueError("Invalid JSON: 'entry' key not found")
    
    notification_messages = []
    for entry in data['entry']:
        changes = entry.get('changes', [])
        for change in changes:
            value = change.get('value', {})
            statuses = value.get('statuses', [])  
            
            for status in statuses:  
                if status['status'] == 'sent':
                    notification_message_id = status['id']
                    recipient_id = status['recipient_id']
                    
                    message_timestamp = datetime.fromtimestamp(
                        int(status['timestamp'])
                    ).strftime('%Y-%m-%d %H:%M:%S')
                    
                    
                    notification_messages.append({
                        "sender_phone": recipient_id,
                        "message_content": "",
                        "device_id" : "",
                        "batch_number" : "",
                        "message_timestamp": message_timestamp,
                        "whatsapp_message_id" : notification_message_id                        
                    })
    
    return notification_messages          
    

def extract_device_and_batch_info(message):
    """
    Extracts device_id and batch_number from a given notification message.
    
    :param message: The notification message string.
    :return: A dictionary with 'device_id' and 'batch_number' or None if not found.
    """
    pattern = r"The\s+\*([\w-]+)\*\s+\(Batch:\s*([\w-]+)\)"

    match = re.search(pattern, message)
    if match:
        return {
            "device_id": match.group(1),
            "batch_number": match.group(2)
        }
    return None

def parse_user_message(data):
    # Validate that the input has the required structure
    if not data.get('entry'):
        raise ValueError("Invalid JSON: 'entry' key not found")
    
    parsed_messages = []
    
    # Loop through each entry
    for entry in data['entry']:
        changes = entry.get('changes', [])
        for change in changes:
            value = change.get('value', {})
            messages = value.get('messages', [])
            metadata = value.get('metadata', {})
            contacts = value.get('contacts', [])
            
            for message in messages:
                # Extract sender's info
                contact = contacts[0] if contacts else {}
                sender_name = contact.get('profile', {}).get('name', "Unknown")
                sender_phone = contact.get('wa_id', "Unknown")
                
                # Extract message details
                message_content = message.get('text', {}).get('body', "No text")
                message_timestamp = message.get('timestamp', "Unknown")
                
                # Extract message meta data
                reply_message_context = message.get('context', {}) # this will only be available if current message is a reply to another message
                message_whatsapp_id = message['id'] # this is an id generated by whatsapp
                
                # Convert timestamp (if present) to human-readable format
                if message_timestamp != "Unknown":
                    message_timestamp = datetime.fromtimestamp(
                        int(message_timestamp)
                    ).strftime('%Y-%m-%d %H:%M:%S')
                
                # Collect parsed message info
                parsed_messages.append({
                    "sender_name": sender_name,
                    "sender_phone": sender_phone,
                    "message_content": message_content,
                    "message_timestamp": message_timestamp,
                    "reply_message_context" : reply_message_context,
                    "whatsapp_message_id" : message_whatsapp_id
                    
                    
                })
    
    return parsed_messages


def get_wamid_sent_messages(stdout):
    # Split the response into headers and JSON body
    parts = stdout.split("\n\n", 1)  # Split at the first double newline
    if len(parts) > 1:
        json_str = parts[1].strip()  # Extract and clean the JSON part
    else:
        raise ValueError("No JSON body found in response")

    # Parse JSON
    data = json.loads(json_str)

    # Extract the message ID
    message_id = data.get("messages", [{}])[0].get("id", None)

    return message_id

def save_notification(notification, agent_user_id, user_collection, chat_collection, message_collection, notification_collection):
    
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    notification_message = notification['message_content']
    notification_timestamp = notification['message_timestamp']
    phone_number = notification['sender_phone']
    whatsapp_message_id = notification['whatsapp_message_id']
    device_id =  notification["device_id"]
    batch_number = notification["batch_number"]
    
    # create user if not previously created (notification dont required a name)
    user_id = user_collection.insert_user({
                "phone_number" : phone_number,
            })
    
    # insert notification
    notification_message_id = message_collection.insert_one(
        {
            "timestamp" : notification_timestamp,
            "sender_id" : agent_user_id,
            "recipient_id" : user_id,  
            "message_type" : "text",
            "media_id" : "",
            "device_id" : device_id,
            "batch_number" :batch_number,
            "message_content" : notification_message,
            "whatsapp_message_id" : whatsapp_message_id
            
        })
    
    # create / update a chat
    chat_id = chat_collection.insert_chat(
                {
                    "user_id": user_id,
                    "start_timestamp": current_time,
                    "last_updated_timestamp": current_time,
                    "message_ids" : [notification_message_id.inserted_id]
                })

    # update notification collection
    not_id = notification_collection.append_notification_messages(
                {
                    "phone_num" : phone_number,
                    "notification_message_id" : notification_message_id.inserted_id
                })
    



def send_message(response, received_phone_num):
    url = f"https://graph.facebook.com/{VERSION}/{PHONE_NUMBER_ID}/messages"
    headers = {
        "Authorization": "Bearer EAAIo4ZB4oHeoBOwbNZCqzDH7WKHTnEpgq54VeMyludsoBor6ytHBJyYL93cigYytGgGacTOT3CIZCNvc2ZCLc5eA0CTElak1igvr7w16ptsb4hnBJpFGtGZAMgUS4QKnT0tMGOLswmqYcvYisTbEKqPSOmOeMJgdFctLUrCmFOZBxPjETFrGMXAZAJjXLxm1I5ceNnKmWLlwzorOi5xpqXZBwEZBSwvQZD",
        "Content-Type": "application/json"
    }
    
    data = {
        "messaging_product": "whatsapp",
        "to": received_phone_num,
        "type": "text",
        "text": {
            "body": response
        }
    }
    
    curl_command = [
        "curl", "-i", "-X", "POST", url,
        "-H", f"Authorization: {headers['Authorization']}",
        "-H", f"Content-Type: {headers['Content-Type']}",
        "-d", json.dumps(data)
    ]
    
    try:
        result = subprocess.run(curl_command, capture_output=True, text=True, check=True)
        # print("Response:", result.stdout)
        return get_wamid_sent_messages(result.stdout)
        
        # save the wamid to filter them in the webhook
        
    except subprocess.CalledProcessError as e:
        print("Error occurred:", e.stderr)
        return -1
        
        
def save_chat(user_message, responce, agent_user_id, user_collection, chat_collection, message_collection, responce_collection):
    
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    question = user_message['message_content']
    question_timestamp = user_message['message_timestamp']
    phone_number = user_message['sender_phone']
    sender_name = user_message['sender_name']
    reply_context = user_message['reply_message_context']
    whatsapp_message_id = user_message['whatsapp_message_id']
   
    # create user if not previously created
    user_id = user_collection.insert_user({
                "name" : sender_name,
                "phone_number" : phone_number,
            })
    
    # insert user question
    user_question_id = message_collection.insert_one(
        {
            "timestamp" : question_timestamp,
            "sender_id" : user_id,
            "recipient_id" : agent_user_id,
            "message_type" : "text",
            "media_id" : "",
            "message_content" : question,
            # insert whatapp message metadata
            "reply_message_context" : reply_context, # this include and whatapp message id
            "whatsapp_message_id" : whatsapp_message_id
            
        
        })
    
    
    sent_wamid = send_message(responce, user_message.get("sender_phone"))
    
    # update sent_id collection with the wamid
    responce_collection.append_wamid(sent_wamid)
    
    
    # insert llm responce
    llm_response_id = message_collection.insert_one(
        {
            "timestamp" : current_time,
            "sender_id" : agent_user_id,
            "recipient_id" : user_id,  
            "message_type" : "text",
            "media_id" : "",
            "message_content" : responce,
            "whatsapp_message_id" : sent_wamid
            
        })
    
    # create a chat
    chat_id = chat_collection.insert_chat(
                {
                    "user_id": user_id,
                    "start_timestamp": current_time,
                    "last_updated_timestamp": current_time,
                    "message_ids" : [user_question_id.inserted_id, llm_response_id.inserted_id]
                })
    

def get_whatsapp_chat_history(user_message, user_collection, chat_collection, message_collection):
  
    sender_phone = user_message['sender_phone']
    
    chat_history = []
    
    query = {"phone_number": sender_phone}
    user_document = user_collection.get_one_document(query)
    if user_document:
        user_id = user_document["_id"]
        query = {"user_id": user_id}
        chat_document = chat_collection.get_one_document(query)
        if chat_document and "message_ids" in chat_document:
            message_id_list = chat_document["message_ids"]
            
            # populate chat
            for id in message_id_list:
                print(id)
                query = {"_id": id}
                message_document = message_collection.get_one_document(query)
                
                sender_id = message_document['sender_id']
                ret = user_collection.get_one_document({'_id': sender_id})
                
                if message_document['message_type'] == 'text':
                    chat_history.append(f"{ret['name']} : {message_document['message_content']}")
                
            # print(chat_history)
            return chat_history
        
        else:
            print(f"No chats recorded for user : {sender_phone}")  
            return chat_history
    else:
        print(f"No such user : {sender_phone}")
        return chat_history        
            
            
    
    
    
    
    
    
